async function testBotCommand(sock, chatId, message) {
    try {
        const testResults = [];
        
        // Test basic commands
        testResults.push("ü§ñ *OPTIMUS_PRIME MD - SYSTEM TEST*\n");
        testResults.push("‚úÖ Bot is online and responding");
        testResults.push("‚úÖ Message processing is working");
        testResults.push("‚úÖ Command parsing is functional");
        
        // List of working commands
        const workingCommands = [
            "üéµ **Audio Commands:**",
            "‚Ä¢ `.play <song name>` - Download audio",
            "‚Ä¢ `.lyrics <song name>` - Get song lyrics", 
            "‚Ä¢ `.tts <text>` - Text to speech",
            "",
            "üé® **Sticker Commands:**",
            "‚Ä¢ `.sticker` - Reply to image/video",
            "‚Ä¢ `.attp <text>` - Animated text sticker",
            "‚Ä¢ `.take <name>` - Change sticker pack name",
            "",
            "üí¨ **Fun Commands:**",
            "‚Ä¢ `.flirt` - Get pickup lines",
            "‚Ä¢ `.dare` - Truth or dare",
            "‚Ä¢ `.joke` - Random jokes",
            "‚Ä¢ `.fact` - Random facts",
            "",
            "üì± **Download Commands:**",
            "‚Ä¢ `.instagram <link>` - Instagram downloader",
            "‚Ä¢ `.facebook <link>` - Facebook downloader", 
            "‚Ä¢ `.tiktok <link>` - TikTok downloader",
            "",
            "üõ†Ô∏è **Admin Commands:**",
            "‚Ä¢ `.ping` - Check bot latency",
            "‚Ä¢ `.alive` - Bot status",
            "‚Ä¢ `.menu` - Full command list"
        ];
        
        testResults.push(...workingCommands);
        
        const finalMessage = testResults.join('\n');
        
        await sock.sendMessage(chatId, {
            text: finalMessage,
            contextInfo: {
                forwardingScore: 999,
                isForwarded: true,
                forwardedNewsletterMessageInfo: {
                    newsletterJid: '10029Vb7Gh46F1YlLwxJ4UO0q85998@newsletter',
                    newsletterName: 'OPTIMUS_PRIME MD',
                    serverMessageId: -1
                }
            }
        }, { quoted: message });
        
    } catch (error) {
        console.error('Error in test-bot command:', error);
        await sock.sendMessage(chatId, {
            text: '‚ùå Test command failed: ' + error.message,
            contextInfo: {
                forwardingScore: 999,
                isForwarded: true,
                forwardedNewsletterMessageInfo: {
                    newsletterJid: '10029Vb7Gh46F1YlLwxJ4UO0q85998@newsletter',
                    newsletterName: 'OPTIMUS_PRIME MD',
                    serverMessageId: -1
                }
            }
        }, { quoted: message });
    }
}

module.exports = testBotCommand;